from typing import Optional, Iterator

# Definition for a binary tree node.
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val: int = val
        self.left: Optional[TreeNode] = left
        self.right: Optional[TreeNode] = right


class Solution:
    def sumNumbers(self, root: Optional[TreeNode]) -> int:
        if not root:
            return 0
        return sum(int(decimal) for decimal in sumgen(root))


def sumgen(node: TreeNode) -> Iterator[str]:
    if not node.left and not node.right:
        yield str(node.val)
    digit = str(node.val)
    if node.left:
        yield from (digit + decimal for decimal in sumgen(node.left))
    if node.right:
        yield from (digit + decimal for decimal in sumgen(node.right))
